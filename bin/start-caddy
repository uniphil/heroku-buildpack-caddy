#!/usr/bin/env bash
# bin/start-caddy <app-start cmd>
#
# based off of https://github.com/heroku/heroku-buildpack-nginx/blob/38b77474edc6ac59b463a45e540b0aaec3277b44/bin/start-nginx

psmgr=/tmp/caddy-buildpack-wait
rm -f $psmgr
mkfifo $psmgr

n=1
while getopts :f option ${@:1:2}
do
  case "${option}"
  in
    f) FORCE=$OPTIND; n=$((n+1));;
  esac
done

# Start App Server
(
  # Take the command passed to this bin and start it.
  # E.g. bin/start-caddy gunicorn --workers=2 --bind=unix:/run/wsgi.sock wsgi:app
  COMMAND=${@:$n}
  echo "buildpack=caddy at=start-app cmd=$COMMAND"
  $COMMAND
  echo 'app-start' >$psmgr
) &

if [[ -z "$FORCE" ]]
then
  FILE="/tmp/app-initialized"

  # We block on app-initialized so that when caddy binds to $PORT
  # are app is ready for traffic.
  while [[ ! -f "$FILE" ]]
  do
    echo 'buildpack=caddy at=app-initialized-waiting...'
    sleep 1
  done
  echo 'buildpack=caddy at=app-initialized.'
fi

# Start cady
(
  # Run caddy in the foreground
  # We also might expect a socket to be at something like /tmp/wsgi.socket.
  echo 'buildpack=caddy at=caddy-start'
  erb /app/Caddyfile.json.erb > /app/Caddyfile.json
  /app/bin/caddy run --config /app/Caddyfile.json
  echo 'caddy-start' >$psmgr
) &

# This read will block the process waiting on a msg to be put into the fifo.
# If any of the processes defined above should exit,
# a msg will be put into the fifo causing the read operation
# to un-block. The process putting the msg into the fifo
# will use it's process name as a msg so that we can print the offending
# process to stdout.
read exit_process <$psmgr
echo "buildpack=caddy at=exit process=$exit_process"
exit 1
